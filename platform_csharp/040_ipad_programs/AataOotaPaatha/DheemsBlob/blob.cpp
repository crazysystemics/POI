#include<stdio.h>
#include<math.h>
#include<stdlib.h>

//array definition (cluster memory)

int main()
{

    int Cluster_memory_x[16][256];
    int Cluster_memory_y[16][256];

    int value_pointer_array[16];
    int cluster_pointer=0;

    int threshold = 25;

    int X[326] = { 393, 393, 393, 393, 394, 394, 394, 394, 394, 394, 394, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 402, 402, 402, 402, 402, 402, 402, 402, 403, 403, 403, 403, 403, 403, 403, 403, 404, 404, 404, 404, 404, 404, 405, 405, 405, 405, 405, 405, 406, 406, 406, 406, 406, 406, 407, 407, 407, 407, 407, 407, 408, 408, 408, 408, 408, 409, 409, 409, 409, 409, 410, 410, 437, 437, 438, 438, 438, 438, 439, 439, 439, 439, 439, 440, 440, 440, 440, 440, 441, 441, 441, 441, 441, 441, 441, 442, 442, 442, 442, 442, 442, 442, 442, 442, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 444, 444, 444, 444, 444, 444, 444, 444, 444, 445, 445, 445, 445, 445, 446, 446, 446, 447, 484, 485, 485, 485, 486, 486, 486, 486, 486, 487, 487, 487, 487, 487, 487, 487, 487, 487, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 490, 490, 490, 490, 490, 490, 490, 490, 491, 491, 491, 491, 491, 491, 492, 492, 492, 492, 492, 493, 493, 493, 493, 494, 494, 494, 494, 495, 495, 495, 495, 496, 496, 496, 496, 497, 497, 497, 497, 498, 498, 498, 498, 499, 499, 499, 499, 499, 499, 500, 500, 500, 500, 500, 500, 501, 501, 501, 501, 502, 502, 502, 503 };
    int Y[326] = { 340, 341, 343, 344, 339, 340, 341, 342, 343, 344, 345, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 338, 339, 340, 341, 342, 343, 344, 345, 338, 339, 340, 341, 342, 343, 344, 345, 339, 340, 341, 342, 343, 344, 339, 340, 341, 342, 343, 344, 339, 340, 341, 342, 343, 344, 339, 340, 341, 342, 343, 344, 340, 341, 342, 343, 344, 340, 341, 342, 343, 344, 341, 343, 171, 172, 170, 171, 172, 173, 169, 170, 171, 172, 173, 169, 170, 171, 172, 173, 168, 169, 170, 171, 172, 173, 174, 167, 168, 169, 170, 171, 172, 173, 174, 175, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 167, 168, 169, 170, 171, 172, 173, 174, 175, 169, 170, 171, 172, 173, 171, 172, 173, 172, 240, 239, 240, 241, 238, 239, 240, 241, 242, 237, 238, 239, 240, 241, 242, 243, 244, 245, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 237, 238, 239, 240, 241, 242, 243, 244, 237, 238, 239, 240, 241, 242, 238, 239, 240, 241, 242, 238, 239, 240, 241, 238, 239, 240, 241, 238, 239, 240, 241, 239, 240, 241, 820, 240, 819, 820, 821, 819, 820, 821, 822, 818, 819, 820, 821, 822, 823, 818, 819, 820, 821, 822, 823, 819, 820, 821, 822, 819, 820, 821, 820 };
    //initialise the array to 0
    int ix = 0;

    for (int i=0; i<16; i++)
    {
        for (int j=0;j<256;j++)
        {
            Cluster_memory_x[i][j]=0;
            Cluster_memory_y[i][j]=0;
        }
    }

    for (int i = 0; i < 16; i++)
    {        
            value_pointer_array[i] = 0;          
        
    }


    for (int i = 0; i < 326; i++)
    {
        while (cluster_pointer < 16)
        {
            if ((abs(Cluster_memory_x[cluster_pointer][0] - X[i]) + abs(Cluster_memory_y[cluster_pointer][0] - Y[i]) < threshold) && Cluster_memory_x[cluster_pointer][0] != 0 && Cluster_memory_y[cluster_pointer][0] != 0)
            {
                value_pointer_array[cluster_pointer] = 
                    value_pointer_array[cluster_pointer] + 1;
                ix = value_pointer_array[cluster_pointer];
                Cluster_memory_x[cluster_pointer][ix] = X[i];
                Cluster_memory_y[cluster_pointer][ix] = Y[i];
                cluster_pointer = 0;
                break;
            }
            else if (Cluster_memory_x[cluster_pointer][0] != 0 && Cluster_memory_y[cluster_pointer][0] != 0)
            {
                cluster_pointer += 1;
            }
            else
            {
                Cluster_memory_x[cluster_pointer][0] = X[i];
                Cluster_memory_y[cluster_pointer][0] = Y[i];
                cluster_pointer = 0;
                break;
            }
        }
    }

    printf("Done...\n");

}